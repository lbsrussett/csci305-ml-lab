<firstname> <lastname>
CSCI 305
Spring 2018
Lab Questions
=======================
1. fun f [] = [] (* a *)
   | f (x::xs) = (x + 1) :: (f xs) (* b *);  

	val it = [4,2,5,2,6,10] : int list

2. The function f base case returns an empty list if given an empty list.  In the alternative portion, the head of the list is incremented by one, then the remainder of the list is passed back into function f on each recursive call.  This returns a list where each value is the original list's value + 1.

3. (* if an empty list is passed in, return an empty list *)

4. (* if a non-empty list is passed in, for the head value in the list, add one. Then call f recursively on the remaining elements in the list, and cons each one back into the list. Return the resulting list *)

5. False

6. My isMember function uses tail recursion, searching for the element at the head of the set first, then recursing on the remainder of the list.

7. { best times, it was the worst of times }

8. Tail recursion is a method of recursion that allows a function to directly return the result of a recursive call.  This is beneficial because it saves the compiler memory space because the compiler does not have to keep a record of every recursive call.  Tail recursion is very useful for functional languages due to their significant use of recursion.

9. { green eggs and ham }

10. { and macaroni }

11.

12.

13.

14.

15.
